4zNsmwFXAYV6boeJ

//เพิ่มเติม 
app.get('/getrequisition', (req, res) => {
    const sql = 'SELECT date_requisition , requisition_id ,status_requisition , users.name FROM requisition JOIN users ON requisition.user_id = users.user_id WHERE requisition.status_requisition = 1 OR requisition.status_requisition = 2';
    con.query(sql, (err, result) => {
        if (err) {
            console.log(err);
            res.status(500).send("DATABASE ERROR");
        } else {
            res.send(result);
        }
    });
})

app.post('/datareq', (req, res) => {
    const { idreq } = req.body;
    const sql = 'SELECT * FROM requisition JOIN users ON requisition.user_id = users.user_id WHERE requisition.requisition_id = ?';
    con.query(sql, [idreq], (err, result) => {
        if (err) {
            console.log(err);
            res.status(500).send("DATABASE ERROR");
        } else {
            res.send(result);
        }
    });
});

app.post('/datamaterial', (req, res) => {
    const { idreq } = req.body;
    const sql = 'SELECT * FROM material_requisiotion JOIN material ON material_requisiotion.material_id = material.material_id WHERE material_requisiotion.requisition_id = ?';
    con.query(sql, [idreq], (err, result) => {
        if (err) {
            console.log(err);
            res.status(500).send("DATABASE ERROR");
        } else {
            res.send(result);
        }
    })
});

app.post('/approve', (req, res) => {
    const { idreq } = req.body;
    const user_id = req.session.user.user_id;
    const sql = 'UPDATE requisition SET requisition.status_requisition = 2, requisition.admin_id_approval = ? WHERE requisition.requisition_id = ?';
    con.query(sql, [user_id, idreq], (err, result) => {
        if (err) {
            console.log(err);
            res.status(500).send("DATABASE ERROR");
        } else {
            if (result.affectedRows != 1) {
                console.log(err);
                res.status(500).send("UPDATE ERROR");
            } else {
                res.send("/requisition");
            }
        }
    });
})

app.post('/updateAmountM', (req, res) => {
    const { requisition_id, material_id, number_of_requisition } = req.body;
    const sql = 'UPDATE material_requisiotion SET material_requisiotion.amount_of_divide = ? WHERE material_requisiotion.requisition_id = ? AND material_requisiotion.material_id = ?';
    con.query(sql, [number_of_requisition, requisition_id, material_id], (err, result) => {
        if (err) {
            console.log(err);
            res.status(500).send("DATABASE ERROR");
        } else {
            if (result.affectedRows != 1) {
                console.log(err);
                res.status(500).send("UPDATE ERROR");
            } else {
                const sql = 'UPDATE material JOIN material_requisiotion ON material.material_id = ? JOIN requisition ON requisition.requisition_id = material_requisiotion.requisition_id AND requisition.requisition_id = ? SET material.material_number = material.material_number - material_requisiotion.amount_of_divide';
                con.query(sql, [material_id, requisition_id], (err, result) => {
                    if (err) {
                        console.log(err);
                        res.status(500).send("DATABASE ERROR");
                    } else {
                        if (result.affectedRows != 1) {
                            console.log(err);
                            res.status(500).send("UPDATE ERROR");
                        } else {
                            res.send("success");
                        }
                    }
                });
            }
        }
    });

})

app.post('/unapprove', (req, res) => {
    const { requisition_id, txtcomment } = req.body;
    const sql = 'UPDATE requisition SET requisition.status_requisition = 3 , requisition.annotation_of_disproval = ? WHERE requisition.requisition_id = ?';
    con.query(sql, [txtcomment, requisition_id], (err, result) => {
        if (err) {
            console.log(err);
            res.status(500).send("DATABASE ERROR");
        } else {
            if (result.affectedRows != 1) {
                console.log(err);
                res.status(500).send("UPDATE ERROR");
            } else {
                res.send("/requisition");
            }
        }
    });
})

app.post('/complete', (req, res) => {
    const { requisition_id } = req.body;
    const user_id = req.session.user.user_id;
    const sql = 'UPDATE requisition SET requisition.status_requisition = 4 ,requisition.admin_id_success = ?, requisition.date_pickup = CURDATE() , requisition.time_pickup = CURTIME() WHERE requisition.requisition_id = ?';
    con.query(sql, [user_id, requisition_id], (err, result) => {
        if (err) {
            console.log(err);
            res.status(500).send("DATABASE ERROR");
        } else {
            if (result.affectedRows != 1) {
                console.log(err);
                res.status(500).send("UPDATE ERROR");
            } else {
                res.send("/requisition");
            }
        }
    });
})

app.get('/allDatahisadmin', (req, res) => {
    const sql = 'SELECT requisition.requisition_id , requisition.date_requisition , status_requisition , users.name FROM requisition JOIN users ON requisition.user_id = users.user_id  AND YEAR(requisition.date_requisition) = YEAR(CURDATE()) AND MONTH(requisition.date_requisition) = MONTH(CURDATE()) WHERE requisition.status_requisition = 3 OR requisition.status_requisition = 4';
    con.query(sql, (err, result) => {
        if (err) {
            console.log(err);
            res.status(500).send("DATABASE ERROR");
        } else {
            res.send(result);
        }
    });
});

app.post('/selectmonth', (req, res) => {
    const { month } = req.body;
    const sql = 'SELECT requisition.requisition_id , requisition.date_requisition , status_requisition , users.name FROM requisition JOIN users ON requisition.user_id = users.user_id AND MONTH(requisition.date_requisition) = ? AND YEAR(requisition.date_requisition) = YEAR(CURDATE()) WHERE requisition.status_requisition = 3 OR requisition.status_requisition = 4';
    con.query(sql, [month], (err, result) => {
        if (err) {
            console.log(err);
            res.status(500).send("DATABASE ERROR");
        } else {
            res.send(result);
        }
    })
})

app.post('/dataHisreq', (req, res) => {
    const { idreq } = req.body;
    const sql = 'SELECT requisition.status_requisition , requisition.requisition_id , requisition.objective , requisition.date_requisition , requisition.time_requisition , users.name , requisition.date_pickup , requisition.time_pickup FROM requisition JOIN users ON requisition.user_id = users.user_id WHERE requisition.requisition_id = ?';
    con.query(sql, [idreq], (err, result) => {
        if (err) {
            console.log(err);
            res.status(500).send("DATABASE ERROR");
        } else {
            res.send(result);
        }
    });
})

app.post('/dataHismaterial', (req, res) => {
    const { idreq } = req.body;
    const sql = 'SELECT material_requisiotion.material_id , material.material_name , material.unit , material_requisiotion.amount_of_requisition, material_requisiotion.amount_of_divide FROM material_requisiotion JOIN material ON material_requisiotion.material_id = material.material_id WHERE material_requisiotion.requisition_id = ?';
    con.query(sql, [idreq], (err, result) => {
        if (err) {
            console.log(err);
            res.status(500).send("DATABASE ERROR");
        } else {
            res.send(result);
        }
    });
});

app.get('/getAllDatamaterial', (req, res) => {
    const sql = 'SELECT * FROM material';
    con.query(sql, (err, result) => {
        if (err) {
            console.log(err);
            res.status(500).send("DATABASE ERROR");
        } else {
            res.send(result);
        }
    });
});

app.post('/getsomecategory', (req, res) => {
    const { category_id } = req.body;
    if (category_id == 8) {
        res.redirect('/getAllDatamaterial')
    } else {
        const sql = 'SELECT * FROM material  WHERE category_id = ?';
        con.query(sql, [category_id], (err, result) => {
            if (err) {
                console.log(err);
                res.status(500).send("DATABASE ERROR");
            } else {
                res.send(result);
            }
        });
    }

});


app.get('/getcategory', (req, res) => {
    const sql = 'SELECT * FROM category ';
    con.query(sql, (err, result) => {
        if (err) {
            console.log(err);
            res.status(500).send("DATABASE ERROR");
        } else {
            res.send(result);
        }
    })
})

app.post('/addmaterial', (req, res) => {
    const { material_id, material_name, material_number, unit, category_id } = req.body;
    const user_id = req.session.user.user_id;
    const sql = 'INSERT INTO material (material_id,material_name,material_number,unit,category_id) VALUES (?,?,?,?,?)';
    con.query(sql, [material_id, material_name, material_number, unit, category_id], (err, result) => {
        if (err) {
            console.log(err);
            res.status(500).send("DATABASE ERROR 1");
        } else {
            if (result.affectedRows != 1) {
                console.log(err);
                res.status(500).send("UPDATE ERROR 1");
            } else {

                const sql = 'INSERT INTO manage_stock (date_manage , time_manage , number_material ,status_manage_stock , material_id , user_id) VALUES (CURDATE(), CURTIME(), ? , ? ,  ? , ?)';
                con.query(sql, [material_number, 2, material_id, user_id], (err, result) => {
                    if (err) {
                        console.log(err);
                        res.status(500).send("DATABASE ERROR");
                    } else {
                        if (result.affectedRows != 1) {
                            console.log(err);
                            res.status(500).send("UPDATE ERROR 1");
                        } else {
                            res.send();
                        }

                    }
                })
            }
        }
    });
})

app.post('/editmaterial', (req, res) => {
    const { material_name, plusnumber, unit, material_id } = req.body;
    const sql = 'UPDATE material SET material.material_name = ?, material.material_number = material.material_number + ? , unit = ? WHERE material.material_id = ?';
    con.query(sql, [material_name, plusnumber, unit, material_id], (err, result) => {
        if (err) {
            console.log(err);
            res.status(500).send("DATABASE ERROR");
        } else {
            if (result.affectedRows != 1) {
                console.log(err);
                res.status(500).send("UPDATE ERROR 1");
            } else {
                const sql = 'INSERT INTO manage_stock (date_manage , time_manage , number_material ,status_manage_stock , material_id , user_id) VALUES (CURDATE(), CURTIME(), ? , ? ,  ? , ?)';
                const user_id = req.session.user.user_id;
                con.query(sql, [plusnumber, 1, material_id, user_id], (err, result) => {
                    if (err) {
                        console.log(err);
                        res.status(500).send("DATABASE ERROR");
                    } else {
                        if (result.affectedRows != 1) {
                            console.log(err);
                            res.status(500).send("UPDATE ERROR 1");
                        } else {
                            res.send();
                        }

                    }
                });
            }

        }
    });
});

app.post('/importmaterial', (req, res) => {
    const { material_id, material_name, material_unit, category_id } = req.body;
    const sql = "INSERT INTO material (material_id,material_name,material_number,unit,category_id) VALUES (?,?,?,?,?)";
    con.query(sql, [material_id, material_name, 0, material_unit, category_id], (err, result) => {
        if (err) {
            console.log(err);
            res.status(500).send("Database Server Error")
        }
        else {
            if (result.affectedRows == 0) {
                console.log(err);
                res.status(500).send("INSERT ERROR 1");
            } else {
                res.send();
            }
        }
    });
})
